"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[2333],{3881:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var n=a(7462),i=(a(7294),a(3905));a(1839);const o={id:"Dictionary_Conventions",title:"Dictionary Conventions",sidebar_label:"Dictionary Conventions"},r=void 0,c={unversionedId:"dictionary/Dictionary_Conventions",id:"dictionary/Dictionary_Conventions",title:"Dictionary Conventions",description:"1. Titles of Dictionaries are denoted in all-caps. E.g.",source:"@site/docs/dictionary/Dictionary_Conventions.md",sourceDirName:"dictionary",slug:"/dictionary/Dictionary_Conventions",permalink:"/docs/dictionary/Dictionary_Conventions",draft:!1,editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/docs/dictionary/Dictionary_Conventions.md",tags:[],version:"current",frontMatter:{id:"Dictionary_Conventions",title:"Dictionary Conventions",sidebar_label:"Dictionary Conventions"},sidebar:"docs",previous:{title:"Test",permalink:"/docs/test"},next:{title:"User Dictionary",permalink:"/docs/dictionary/User_Dictionary/"}},l={},s=[],m={toc:s};function h(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Titles of Dictionaries are denoted in all-caps. E.g."),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"DREAMCATCHER USER DICTIONARY"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Dictionary is hierarchical in nature. That is, one Dictionary can be extended by another, while inheriting the definitions of the first. The relationship is:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"DREAMCATCHER OS (or DOS for short) DICTIONARY"),(0,i.kt)("li",{parentName:"ol"},"DREAMCATCHER ARCHITECTURE DICTIONARY"),(0,i.kt)("li",{parentName:"ol"},"DREAMCATCHER USER DICTIONARY"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A word Capitalised and in Italics refers to a defined term with its own Dictionary entry.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A defined term can be followed by a type, in parentheses. The list of valid types is as follows:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Object"),(0,i.kt)("li",{parentName:"ol"},"Field"),(0,i.kt)("li",{parentName:"ol"},"Event"),(0,i.kt)("li",{parentName:"ol"},"Selection"),(0,i.kt)("li",{parentName:"ol"},"Link"),(0,i.kt)("li",{parentName:"ol"},"Workflow"),(0,i.kt)("li",{parentName:"ol"},"Typeof"),(0,i.kt)("li",{parentName:"ol"},"Covenant - logic in the blockchain system"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Structure conventions:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Object - denoted in the structure as: Objectname/"),(0,i.kt)("li",{parentName:"ol"},"Child - denoted in the structure as an object on a new line nested in by one tab from the object above it."),(0,i.kt)("li",{parentName:"ol"},"Field - denoted as: ?fieldname: fieldvalue"),(0,i.kt)("li",{parentName:"ol"},"Link to another Project\u2019s Object: name -> ObjectLocation"),(0,i.kt)("li",{parentName:"ol"},"Link in another Project that refers to this Project\u2019s Object: name <- otherProjectsLink"),(0,i.kt)("li",{parentName:"ol"},"Weak Link to another Project\u2019s Object: name ~> ObjectLocation"),(0,i.kt)("li",{parentName:"ol"},"Fork of an Object: name <# ObjectLocation which reads as \u201cname is a Fork of ObjectLocation\u201d"),(0,i.kt)("li",{parentName:"ol"},"To indicate where another Object is a fork of this one, the format is name #> ObjectLocation, where ObjectLocation is a Fork of name."),(0,i.kt)("li",{parentName:"ol"},"Data in the structure that is auto-generated from an algo: (generatedFromAlgo)"),(0,i.kt)("li",{parentName:"ol"},"Branches of Projects are denoted by: ","[governanceName$/]","projectName","[@forkName]","."),(0,i.kt)("li",{parentName:"ol"},"projectName@branchName denotes a Branch which has the same Governance as the Origin."),(0,i.kt)("li",{parentName:"ol"},"governanceName:projectName@branchName denotes a Branch which has different governance from the Origin."),(0,i.kt)("li",{parentName:"ol"},"Specific blocks within an Object\u2019s chain are denoted by: Objectname#blockNumber. Objectname can be a full path or abbreviated for example."),(0,i.kt)("li",{parentName:"ol"},"The top level of a Sovereign Object is denoted by Project1:/"),(0,i.kt)("li",{parentName:"ol"},"A Project which has not yet been Birthed is denoted by Project1/ This is a shorthand for the location of the Object within a hierarchy. E.g. DOSInstance:/Apps/Dreamcatcher/Projects/Project1/ can be shortened to Project1/"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A term which refers to another location in the Dictionary is denoted by square brackets, e.g.:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Attribution Algorithm ","[See Attribution ALGO DICTIONARY]")))))}h.isMDXComponent=!0}}]);