"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[9037],{2440:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>h});var a=n(7462),o=(n(7294),n(3905));n(1839);const i={},s="R12 Atomic Economics",r={unversionedId:"Requests/R12",id:"Requests/R12",title:"R12 Atomic Economics",description:"Strategic Intent",source:"@site/dust/Requests/R12.md",sourceDirName:"Requests",slug:"/Requests/R12",permalink:"/dust/Requests/R12",draft:!1,editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/dust/Requests/R12.md",tags:[],version:"current",frontMatter:{},sidebar:"dust",previous:{title:"R11 Internet Attribution",permalink:"/dust/Requests/R11"},next:{title:"R13 Measuring DX",permalink:"/dust/Requests/R13"}},c={},h=[{value:"Strategic Intent",id:"strategic-intent",level:2}],l={toc:h};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"r12-atomic-economics"},"R12 Atomic Economics"),(0,o.kt)("h2",{id:"strategic-intent"},"Strategic Intent"),(0,o.kt)("p",null,"All software objects have economic forces shaping their construction, instantiation, evolution, and demise. Some of those forces are on the software code that makes them"),(0,o.kt)("p",null,"Make a diagram of the economic forces on a Dreamcatcher object and how it interacts with the machine that made it."),(0,o.kt)("p",null,"Contrast to the forces on conventional software objects"),(0,o.kt)("p",null,"every object also contains a link to governance, and to global energy markets and computation markets, which shape the objects behaviour in an often hidden way."),(0,o.kt)("p",null,"Our object model should be able to model the energy markets and computational markets that run our objects, allowing an internal representation of the external world that contains us, and allow interaction and decision making based on this information."),(0,o.kt)("p",null,"This model should describe why datacentres pop up for conventional programming."),(0,o.kt)("p",null,"Should show:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"upgrade of interblock"),(0,o.kt)("li",{parentName:"ol"},"downgrade of interblock"),(0,o.kt)("li",{parentName:"ol"},"upgrade of running software, in presence of dispute")),(0,o.kt)("p",null,"Conventional objects, to be useful, need to be persisted, then scaled - these are simply investment hurdles that need overcoming"),(0,o.kt)("p",null,"The attribution trees of conventional objects contain within them the seeds of their own destruction. Because they block their utility meeting the paying customers, but leave a large hurdle, once they achieve any kind of significance, they are constantly subject to competitive attack."),(0,o.kt)("p",null,"The powerful structures learn to fight competition before it rises through suppression or assimilation, but surely this defers the inevitable."),(0,o.kt)("p",null,"Below is a discussion that needs to be processed into this Request:"),(0,o.kt)("p",null,"mcnasty \u2014 Yesterday at 1:04 PM\n@rexmondo what is the form of completeness where a system can model itself, is aware of itself, and can interact with other instances of itself ?\ntake ethereum for example, can any program be represented in solidity ? maybe - probably. Can it reference itself as a model, or interact with other instances of itself ? no, since it has no concept of such things in the language, and I cannot think how they could introduce that in without making it so different as to be unrecognizeable.\nI also think that the rate of change of the solidity language is so slow as to be considered non-existent, so it will almost certainly not expand to have this ability, this ability to reflect upon itself.\nI wish there was a feature list for programming languages - I think it would include reflection, asynchrony, multithreading, remote invocation, persistence, throwing errors - what else ?\nrexmondo \u2014 Yesterday at 1:16 PM\nIn lisp they called it homoiconicity\nMeaning the language was expressed entirely using data structures for the language, so the language can read its own source code like it can read any data in a program\nGenerally the suite of features I think you\u2019re referring to here is called meta programming\nmcnasty \u2014 Yesterday at 1:18 PM\nI found this list: ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Comparison_of_multi-paradigm_programming_languages"},"https://en.wikipedia.org/wiki/Comparison_of_multi-paradigm_programming_languages"),"\nComparison of multi-paradigm programming languages\nProgramming languages can be grouped by the number and types of paradigms supported.\nrexmondo \u2014 Yesterday at 1:19 PM\nYeah that list looks good\nI think theres possibly a more mathy term on the top of my tongue I\u2019m gonna need to think about\nmcnasty \u2014 Yesterday at 1:53 PM\nI'm just wrestling with the notion of being able to wrap other chains. Surely if you can wrap any other chain, including yourself, then you have significantly more operational power than the other chains ?\nand just like ipld can wrap anything, such a chain should probably only be done once - like there isn't much point having several different types since what would their advantages be over each other anyway \ud83e\udd37 ?\nI mean there aren't any competitors to IPFS that I can see, really\nits kinda like \"welp, that solves that problem\"\nrexmondo \u2014 Yesterday at 1:56 PM\nSo as I keep saying, I think the ultimate power of a blockchain will probably prove to be auditing\nWrapping a chain for a finite sequence of blocks in order to make some sort of statement about what was observed in that sequence is like moving the auditing process in-band\nIn fact, to me this suggests the entire validation process could be looking at alternate possible sequences of blocks\nI think the whole chai in chain thing has as much possible power as the stream in stream thing that libraries like rx promote\nmcnasty \u2014 Yesterday at 2:00 PM\nbut I want it deeper than that - that's like saying \"the ultimate power of xyz language will be its debugger !\" but really, all languages should operate on the blockchain model of actions, replayable actions, snapshots, then signatures\nits' about taking a bunch of different concepts to their conclusion - like docker containers - I don't want the whole OS I just want my single covenant isolated\nstorage - I don't want a whole table, I just want my chain\nbackups - I don't want this incohesive dump - I just want my data and I want to access it programmatically and natively\nrexmondo \u2014 Yesterday at 2:04 PM\nYeah I see what you\u2019re saying\nmcnasty \u2014 Yesterday at 2:04 PM\nultimately I want to see silicon that is optimized for this way of operating\nbecause it has potential to be massively parallel\nrexmondo \u2014 Yesterday at 2:05 PM\nThings get tangled up with their context and they really shouldn\u2019t\nContext free compute\nmcnasty \u2014 Yesterday at 2:05 PM\nI hear some of the erlang guys lamenting about these things - they don't want faster cores they want more cores. They don't want bigger ram they want more isolated ram units\nyes context free\nrexmondo \u2014 Yesterday at 2:06 PM\nI think if other industries realized the amount of time devs spend just getting the env worked out to try some new tool they would gag\nmcnasty \u2014 Yesterday at 2:06 PM\nipfs gives us some of the context freeness - we need to provide the missing compute bit on top\nrexmondo \u2014 Yesterday at 2:06 PM\nIt\u2019s like if you were building a bridge and you spend the first 30% of the project designing your own bolts\nLike why would you ever do that\nJust use the same bolts as everyone else\nIt\u2019s not like you\u2019ll want to be stuck maintaining the bridge forever\nmcnasty \u2014 Yesterday at 2:07 PM\ngosh that is shameful when you put it like that\n\"Hey for this project we're going to try something nobody has ever done before\"\n\"ORLY ?\"\nSo Dreamcatcher would be like putting a toll on said bridge, and paying out to anyone who maintains the bridge in the future\nI imagine it would be quite well maintained. Well I hope so, at least.\nrexmondo \u2014 Yesterday at 2:09 PM\nAlso, it should be more than maintained\nIt\u2019s should be made of as many\u2019s standard pieces as possible so when the state of the art changes it can be upgraded in a predictable way by someone who didn\u2019t build it\nWe need to free compute from computers\nmcnasty \u2014 Yesterday at 2:10 PM\nyes thats exactly what we want\nrexmondo \u2014 Yesterday at 2:10 PM\nSo that we can talk about the raw atoms of compute\nWhy is there 18 dialects of sql when everyone uses json in ram\nWhy do you need to load a framework to ask 500 computers to perform a big task in parallel\nmcnasty \u2014 Yesterday at 2:12 PM\nI believe its because in the closed source world, you could make money by being slightly better. In the open source world in which blockchains must operate, you cannot make money like that\nrexmondo \u2014 Yesterday at 2:12 PM\nWhy are the primitives in programs things like bools and ints. Why aren\u2019t they processes?\nmcnasty \u2014 Yesterday at 2:12 PM\nyes - why is asking 500 computers so dramatically different from asking the next core, or even the next thread ?\noooooooooooooooooo now you're talking\nthe process primitive\nor rather, object primitive, since it has persistent state and can be network transmitted and queried\nrexmondo \u2014 Yesterday at 2:13 PM\nYeah for sure\nI think we need to make the bolts and riveting and welding of the programming world\nIt\u2019s shameful they haven\u2019t been made yet\nIt should be trivial for any moron to make a web scale business\nmcnasty \u2014 Yesterday at 2:19 PM\nUsing this type of diagram I have been trying to find a way to make a specification for interblock - like an RFC - that asks for these algebraic like interactions between object primitives, and then maps each one to various aspects of object oriented programming. But it goes further than conventional object oriented in that it pulls in multithreading, scale, persistence, transmission, queries, upgrades, security, and history as well."),(0,o.kt)("p",null,'Then, to take it all the way, I wanted to spec the financial aspects of program construction and maintenance / expansion as well, in the same algebraic type way, saying that the economics of constructing apps using serverless object primitives at its base should follow a standard model, since the bottleneck of computing is rarely cpus, and more so programmers, and most of all business folk and economic forces.\nmcnasty \u2014 Yesterday at 2:19 PM\nI need more 100% emojis to indicate my agreement...\nrexmondo \u2014 Yesterday at 2:22 PM\nHonestly, the idea of a visual and algebraic dictionary of financial primitives sounds like something I wish I had when I was 12 years old\nI would be in a way better place now lol\nmcnasty \u2014 Yesterday at 2:23 PM\nthe hardest part of programming is the economics of it\nrexmondo \u2014 Yesterday at 2:23 PM\nI would say the bottleneck of programming is making the business folk understand the devs and vice versa\nA Rosetta stone for that would actually change the world\nmcnasty \u2014 Yesterday at 2:24 PM\ni think the problem is the business folk even being there in the first place lol\nbasically I think we can describe the dreamcatcher in terms of operations the smallest possible dreamcatcher serverless object is capable of. So all the object functions I outlined plus attribution to the code commits it ran on (including interblock itself) and attribution to the execution of that object, and attribution to the information the object represents\nrexmondo \u2014 Yesterday at 2:41 PM\nYeah I think I\u2019m seeing it\nThe primitive transformations plus their dilution basically\nmcnasty \u2014 Yesterday at 2:42 PM\nwhat do you mean by dilution ?\nrexmondo \u2014 Yesterday at 2:43 PM\nIn the cap table sense I guess\nSince change is a response to external stimulus, building things is mostly a process of dilution of interest\nLike adding more and more external expertise until an ideal outcome is achieved\nmcnasty \u2014 Yesterday at 2:44 PM\noh ! yes I get you\nevery single object has to have certain basic features to be useful, and is subject to certain economic forces, which can be expressed on a per object basis\nin the current paradigm that would be hard to calculate as it isn\'t built in to the stack\nand worse, things like persistence are not accounted for on a per object level anyway, further complicating the per object accounting\ncode attribution is done using tools that amount to just pen and paper\nand revenue per object is never shared directly with contributors in order to induce further future contributions from new and old people\nmcnasty \u2014 Yesterday at 2:59 PM\nThe more I think about Dreamcatcher as both cleaning up the object model of programming by standardizing the nuts and bolts and welds of the stack, and also providing a per object method for complete lifecycle management including financial investing and incentives, the clearer it gets \ud83e\udd37\nwhat are large programs other than collections of smaller objects, each object subject to those same forces...\nthat introspection that I\'m grasping for is the ability of a system to model its entire supply chain, and be used in its own operational management\nrexmondo \u2014 Yesterday at 3:12 PM\nYeah, I like this. It\u2019s like row level access control on steroids\nPersistent tracking of stakeholders at every moment in time of even the most fine grained datum\nmcnasty \u2014 Yesterday at 3:14 PM\nyeah - automatically and from day 1\nrexmondo \u2014 Yesterday at 3:31 PM\nPersistent tracking of stakeholders at every moment in time of even the most fine grained datum\nmcnasty \u2014 Yesterday at 3:58 PM\nPersistent tracking of stakeholder provenance at every transition at the most fine grained datum ?\nrexmondo \u2014 Yesterday at 3:58 PM\nYeah\nmcnasty \u2014 Yesterday at 3:59 PM\nits not the stakeholders we\'re tracking, its like where did they come from and how much did they contribute.\nand its not "of even the most fine grained datum" because its only the most fine grained datum\nrexmondo \u2014 Yesterday at 3:59 PM\nYeah that makes sense\nmcnasty \u2014 Yesterday at 3:59 PM\nPersistent tracking of contributor provenance for every transition at the most fine grained datum\nor did stakeholder capture something more ?\nI don\'t mean to kill your statement - I\'m just trying to bake some of our core concepts in there tighter\nIf I said "Persistent tracking of contributor provenance in every block" - what would have been lost compared to your statement ?\nbecause every moment in time for us is every block, and the most fine grained datum is a block, too, so like... combine ?\nrexmondo \u2014 Yesterday at 4:06 PM\nContributor I think is tighter\nSo I\u2019m grasping here a little bit\nBut\nmcnasty \u2014 Yesterday at 4:09 PM\nI think it is a Dreamcatcher Object if it contains within it these automated lifecycle management abilities\nrexmondo \u2014 Yesterday at 4:09 PM\nI think there\u2019s a sense that stakeholder might be meaningful too\nmcnasty \u2014 Yesterday at 4:10 PM\nyeah stakeholder seems more encompassing\nrexmondo \u2014 Yesterday at 4:10 PM\nData always exists because someone chose to record it\nmcnasty \u2014 Yesterday at 4:11 PM\nand I think collapsing time and datum into block loses the contrast to the conventional way of thinking about stakeholder tracking, which is always time based and large datum based\nrexmondo \u2014 Yesterday at 4:11 PM\nPatterns in nature become data when a person tries to attach a causal narrative to them\nI always think of it from the science perspective that I don\u2019t own something just because I\u2019m trying to think about it and understand it in a narrative sense\nContributor I think implies some sense of ownership somewhere\nStakeholder just means I care\nrexmondo \u2014 Yesterday at 4:13 PM\nI like this idea of unifying time and data\nI have to play with it in my head a bit\nmcnasty \u2014 Yesterday at 4:15 PM\nI think "updating" is better than "tracking" as it implies a liveliness about it\nrexmondo \u2014 Yesterday at 4:15 PM\nYeah, and it\u2019s less creepy\nmcnasty \u2014 Yesterday at 4:16 PM\nlol\n"Persistent updating of contribution provenance in every object block" ?\nrexmondo \u2014 Yesterday at 4:17 PM\nYeah'),(0,o.kt)("p",null,"Further discussion:"),(0,o.kt)("p",null,"mcnasty \u2014 Yesterday at 11:27 AM\n@msm @rexmondo this is a crude attempt to describe an atomic model of the economic forces acting on every programming object. These forces are there on all programming objects, but in Dreamcatcher objects, we interact with those forces directly, per object state transition."),(0,o.kt)("p",null,"Black circle is a block in a blockchain"),(0,o.kt)("p",null,"Red arrow: attribtion paid out to 3 types of contribution: 1. Code contributions, including Interblock and Dreamcatcher 2. Energy contributions - the hardware and energy required to execute this state change 3. Symbolic contributions - contributions to whatever real world thing this object models, if anything"),(0,o.kt)("p",null,"Yellow circle: By making the Red attributions open to redirection by future contributions, the yellow circle represents an incentive to future contributors to improve the current object, that they may receive red arrow contributions. This is an attractor. In subsequent blocks the Red attribution payouts pay to a previous future contributor, indicating how the incentives work.\nImage\nrexmondo \u2014 Yesterday at 4:44 PM\nThe yellow one seems like an attractor that would actually steer the whole chain\nmcnasty \u2014 Yesterday at 4:44 PM\nthat's the hope\nrexmondo \u2014 Yesterday at 4:44 PM\nAt first I thought you meant attractor in the sense of pulling attribution\nBut I think those two things must impact each other\nmcnasty \u2014 Yesterday at 4:45 PM\nhopefully inducing contribution\nrexmondo \u2014 Yesterday at 4:45 PM\nThe yellow is like a probe into unexplored state space\nmcnasty \u2014 Yesterday at 4:46 PM\nyeah\nan invitation to contribute\nthese forces are on all programming objects - conventional included - but the attractor is blocked in artificial nonfree ways, as are the attribution payouts\nrexmondo \u2014 Yesterday at 4:48 PM\nLike vendor lock in and ip ownership\nmcnasty \u2014 Yesterday at 4:48 PM\nthe Dreamcatcher model aims to make those attribution and attraction be direct, and subject to a free market\nyes exactly\nrexmondo \u2014 Yesterday at 4:49 PM\nThe diagram is actually really helpful, thanks for drawing\nmcnasty \u2014 Yesterday at 4:49 PM\nok thanks\nrexmondo \u2014 Yesterday at 4:49 PM\nI think the open question for me is how explicit is the yellow thing and what does it look like\nmcnasty \u2014 Yesterday at 4:49 PM\nits getting clearer for me, what we're doing. still needs some work obviously\nthe yellow thing is connected to the Dreamcatcher\nrexmondo \u2014 Yesterday at 4:50 PM\nWhich is the place where people describe what they want\nmcnasty \u2014 Yesterday at 4:50 PM\nsorry thats super ambiguous.... connected to the Dreamcatcher marketplace of requests, ideas, labour, and funding\nso this model provides more direct connection in that the consumers of objects can directly indicate what they want changed, the labour pool that can enact those changes is open to the whole world, and the funding ability again is open to the whole world, with the payout for improvement being connected directly, automatically, to those who do the improvements\nrexmondo \u2014 Yesterday at 4:52 PM\nLol no it\u2019s all good I think I know what you meant\nmcnasty \u2014 Yesterday at 4:54 PM\nin contrast to conventional programming object, the consumers are connected through the product manager who marshalls their requests for change, then the labour is restricted to employees of the company, then the funding ability is closed down further to the business owners making decisions, with the purpose being the business owners take a massive cut of the hopeful returns from construction and improvement\nso we build company structures that choke the machine something fierce, in the hope that we can get a larger cut than the investment we had to make\nrexmondo \u2014 Yesterday at 4:55 PM\nWhich is like searching the design space through a keyhole\nmcnasty \u2014 Yesterday at 4:55 PM\nif there was ever a way to not build an engine, software construction companies would be the example to use\nrexmondo \u2014 Yesterday at 4:55 PM\nYeah it\u2019s like 100% backwards\nAnd I say that as someone that is doing product work and marshalling user requests actively\nmcnasty \u2014 Yesterday at 4:56 PM\nplus, we get some second order social benefits - engagement, ownership by the user base, enthusiasm - all those good social capital things\nI think that whole story can be illustrated by considering a single Dreamcatcher object as it goes through its complete product lifecycle, including financing, then saying that larger projects are just collections of objects.\nrexmondo \u2014 Yesterday at 5:00 PM\nYes\nYes yes yes\nmcnasty \u2014 Yesterday at 5:00 PM\nthen a contrast to the lifecycle of a conventional software object, highlighting the restrictiveness of the process, and the inefficiencies of the capital allocation, with some sort of gesture towards high chances of failure and high costs\nrexmondo \u2014 Yesterday at 5:01 PM\nIn fact I believe that so strongly that if that wasn\u2019t the case I would say you\u2019ve designed something wrong\nrexmondo \u2014 Yesterday at 5:02 PM\n\u201cInefficiencies of capital allocation\u201d to me means people buying shit they actively disdain, such as the attention of the unwashed masses, because they think it will make them richer\nIt all seems much clearer to me than it did a few years ago\nIf you actually care about what you buy, for its own sake, rather than as a speculation vehicle, everything is flowing in the same direction\nIt\u2019s no wonder we dont have the bolts and riveting of software collectively worked out in the current incentive structure\nmcnasty \u2014 Yesterday at 5:08 PM\nbitcoin as an API has outlasted most software products I can think of. Hopefully we'll get this right and it will last a long time too - like what else could it possibly need to do \ud83e\udd37\nand if we the initializers of the project are subject to the same incentive model, there's really no point trying to make a separate and competing system - its more energy efficient for each individual to contribute to this larger thing, keeping all the bolts and welds the same\nanyway, I'll keep pushing forwards on that atomic diagram - it is both a good explanation of the overall system, and also a demonstration of the granularity we operate at\nmcnasty \u2014 Yesterday at 5:31 PM\nAlso that atomic model won't just be a diagram, but will be observable in the live operations of each Dreamcatcher object\nFurther, we can use our objects to model conventional objects and track and compare their incentive structures and dispersal routes"))}d.isMDXComponent=!0}}]);